import{j as c}from"./index-CizmrxTt.js";const o=c(null),t=c(null),n=c(null),r=c(null),l=c(!1),i=async()=>(o.value||(o.value=new AudioContext,t.value=o.value.createGain(),t.value.gain.value=.15,t.value.connect(o.value.destination)),o.value.state==="suspended"&&await o.value.resume(),o.value),d=()=>{t.value&&(t.value.gain.value=l.value?0:.15)},m=async(a,u=.2,e=.12)=>{const v=await i();if(!t.value)return;const s=v.createOscillator(),f=v.createGain();s.type="square",s.frequency.value=a,f.gain.value=l.value?0:e,s.connect(f).connect(t.value);const p=v.currentTime;s.start(p),s.stop(p+u)},w=async()=>{if(r.value)return r.value;const a=await i(),e=await(await fetch("/src/music/sinterkerst.mp3")).arrayBuffer();return r.value=await a.decodeAudioData(e),r.value},y=async()=>{const a=await i(),u=await w();if(!u||!t.value)return;n.value&&(n.value.stop(),n.value.disconnect());const e=a.createBufferSource();e.buffer=u,e.loop=!0,e.connect(t.value),e.start(0),n.value=e,d()},x=()=>{n.value&&(n.value.stop(),n.value.disconnect(),n.value=null)},g=()=>{[0,4,7,12].forEach((u,e)=>{window.setTimeout(()=>{m(523.25*Math.pow(2,u/12),.25,.18)},e*90)})},h=()=>{m(880,.15,.1)},B=a=>{l.value=a,d()},T=()=>({isMuted:l,ensureContext:i,setMuted:B,startLoop:y,stopLoop:x,playWinChord:g,playTimerPing:h});export{T as u};
